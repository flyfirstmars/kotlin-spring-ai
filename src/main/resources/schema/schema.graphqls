scalar Upload

type Query {
    getChatResponse(conversationId: String, logicType: LogicType, message: String): ChatResponse
    getAllMessages(conversationId: String!): [Message]
    chatCompletion(userPrompt: String!): String
}

type Mutation {
    clearConversation(conversationId: String!): Boolean
    imageAnalysis(image: Upload!): String
}

type Subscription {
    streamChatCompletion(userPrompt: String!): String
    streamChatCompletionWithImageAnalysis(image: Upload!): String
}

type ChatResponse {
    conversationId: String
    response: String
}

enum LogicType {
    ADVISOR
    NO_ADVISOR
}

type Message {
    messageType: String
    metadata: Metadata
    media: [Media]
    toolCalls: [ToolCall]
    text: String
    content: String
}

type Metadata {
    finishReason: String
    refusal: String
    index: Int
    role: String
    id: String
    messageType: String
}

type Media {
    type: String
    url: String
}

type ToolCall {
    name: String
    parameters: String
}
